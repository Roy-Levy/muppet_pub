[{"path":"https://roy-levy.github.io/muppet_pub/articles/example_1.html","id":"overview","dir":"Articles","previous_headings":"","what":"Overview","title":"SEM with 1 Latent Variable and 1 Outcome, in 2 Fragments","text":"example demonstrates use muppet() package perform MUPPET modeling structural equation modeling (SEM) example. example one latent variable indicators outcome. model consists 2 fragments. Fragment 1 factor analytic measurement model indicators. Fragment 2 structural model relating latent variable outcome.","code":""},{"path":"https://roy-levy.github.io/muppet_pub/articles/example_1.html","id":"data-prepration","dir":"Articles","previous_headings":"","what":"Data Prepration","title":"SEM with 1 Latent Variable and 1 Outcome, in 2 Fragments","text":"Load package extract data example. Look data check column names 8 characters. Owing Mplus’s naming conventions parameters, variable names 8 characters fewer. variables discrete (categorical), length names 6 characters fewer. (holds long fewer 10 thresholds categorical variables. ’re using variable 10 thresholds, likely need even shorter variable name.)","code":"library(muppet) data(one.factor.interpr.confound, package = \"muppet\") data.for.mplus <- one.factor.interpr.confound.data # * Check if any column names are more than 8 characters if(!all(nchar(colnames(data.for.mplus)) <= 8)){   print(\"Do not proceed. Rename Mplus variables to have <= 8 characters\")   print(\"See Permissive Norms Example R file for code on renaming variables\") }"},{"path":"https://roy-levy.github.io/muppet_pub/articles/example_1.html","id":"specify-fragment-1","dir":"Articles","previous_headings":"","what":"Specify Fragment 1","title":"SEM with 1 Latent Variable and 1 Outcome, in 2 Fragments","text":"key specification Fragment 1 Mplus syntax factor analytic measurement model. specification, latent variable mean variance fixed, loadings intercepts estimated. Now define specifications fragment. list passing along syntax data . setting conditioning = 0 list specifications, fitting fragment without conditioning fragment.","code":"Mplus.MODEL.syntax.fragment.1 <- \"  ! Factor Model  F1 by x1-x4*;  [x1-x4];   ! Factor Variances  F1@1;   ! Factor Means  [F1@0]; \" fragment.1.specs <- list(   name = \"Measurement Model\",   model.syntax = Mplus.MODEL.syntax.fragment.1,   conditioning = 0,   data = data.for.mplus )"},{"path":"https://roy-levy.github.io/muppet_pub/articles/example_1.html","id":"specify-fragment-2","dir":"Articles","previous_headings":"","what":"Specify Fragment 2","title":"SEM with 1 Latent Variable and 1 Outcome, in 2 Fragments","text":"key specification Fragment 2 Mplus syntax structural portion. Note syntax also includes specifications fixing latent variable mean variance. included Fragment 1 well, also need preserve constraint. effect, function bring results fitted parameters Fragment 1. latent variable mean variance fitted parameters Fragment 1. fixed Fragment 1. “brought forward” looking fitted results Fragment 1. need specified well. Now define specifications fragment. list passing along syntax data, Fragment 1. setting conditioning = 1 list specifications, instructing functions condition results Fragment 1.","code":"Mplus.MODEL.syntax.fragment.2 <- \"  ! Structural relations  y1 on F1;  ! Structural intercepts [y1];   ! Factor Variances  F1@1;   ! Factor Means  [F1@0]; \" fragment.2.specs <- list(   name = \"Structural Model With an Outcome\",   model.syntax = Mplus.MODEL.syntax.fragment.2,   conditioning = 1,   data = data.for.mplus )"},{"path":"https://roy-levy.github.io/muppet_pub/articles/example_1.html","id":"conduct-muppet-modeling","dir":"Articles","previous_headings":"","what":"Conduct MUPPET modeling","title":"SEM with 1 Latent Variable and 1 Outcome, in 2 Fragments","text":"code demonstrates conducting MUPPET modeling. fragments argument contains specifications model fragments defined . rest arguments communicate specifications running MCMC saving output. Running code write output files.","code":"MUPPET.modular(   fragments = list(fragment.1.specs, fragment.2.specs),   n.chains = 2,   n.warmup = 0,   n.burnin = 500,   n.iters.per.chain.after.warmup.and.burnin = 100,   n.estimation.batches = 25,   convergence.assessment = \"none\",   save.summary.plots.from.MUPPET = \"none\" )"},{"path":"https://roy-levy.github.io/muppet_pub/articles/example_2.html","id":"overview","dir":"Articles","previous_headings":"","what":"Overview","title":"SEM with Multiple Latent Variables, in 4 Fragments","text":"example demonstrates use muppet() package perform MUPPET modeling structural equation modeling (SEM) example. example 4 fragments. Fragment 1 measurement model 3 latent variables. Fragment 2 defines measurement model 2 latent variables. Fragment 3 adds measurement model Fragment 2, adding indicators one latent variables. Fragment 4 structural model relating latent variables Fragment 1 latent variables Fragment 3 (2).","code":""},{"path":"https://roy-levy.github.io/muppet_pub/articles/example_2.html","id":"data-prepration","dir":"Articles","previous_headings":"","what":"Data Prepration","title":"SEM with Multiple Latent Variables, in 4 Fragments","text":"Load package extract data example. Look data check column names 8 characters. Owing Mplus’s naming conventions parameters, variable names 8 characters fewer. variables discrete (categorical), length names 6 characters fewer. (holds long fewer 10 thresholds categorical variables. ’re using variable 10 thresholds, likely need even shorter variable name.)","code":"library(muppet) data(sim.POWER, package = \"muppet\") data.for.mplus <- sim.POWER.data # * Check if any column names are more than 8 characters if(!all(nchar(colnames(data.for.mplus)) <= 8)){   print(\"Do not proceed. Rename Mplus variables to have <= 8 characters\")   print(\"See Permissive Norms Example R file for code on renaming variables\") }"},{"path":"https://roy-levy.github.io/muppet_pub/articles/example_2.html","id":"specify-fragment-1","dir":"Articles","previous_headings":"","what":"Specify Fragment 1","title":"SEM with Multiple Latent Variables, in 4 Fragments","text":"key specification Fragment 1 Mplus syntax factor analytic measurement model. specification, 3 latent variables. latent variable means variances fixed, loadings intercepts estimated. Now define specifications fragment. list passing along syntax data .","code":"Mplus.MODEL.syntax.fragment.1 <- \"   ! Working Memory Factor Model   ! Central Executive   CE BY NBAA* NBVA CeNmUp_I;    ! Focus of Attention   FOA BY VsSpnR_I* LcSpnR_I VsSpnW_I LcSpnW_I BndVBW BndCmBW DgSpnR_I BndPBSW;    ! Phonological Storage Rehearsal   PSR BY BndCmBW* DgSpnR_I BndPBSW DgSpnW_I PlNWWW;    ! Factor Variances   CE@1;   FOA@1;   PSR@1;    ! Factor Correlations   CE WITH FOA PSR;   FOA WITH PSR;    ! Factor Means   [CE@0];   [FOA@0];   [PSR@0];   \" fragment.1.specs <- list(   name = \"Working Memory Measurement Model\",   model.syntax = Mplus.MODEL.syntax.fragment.1,   conditioning = 0,   data = data.for.mplus )"},{"path":"https://roy-levy.github.io/muppet_pub/articles/example_2.html","id":"specify-fragment-2","dir":"Articles","previous_headings":"","what":"Specify Fragment 2","title":"SEM with Multiple Latent Variables, in 4 Fragments","text":"Fragment 2 factor analytic measurement model, similar Fragment 1. , key specification Mplus syntax factor analytic measurement model, , means variances (2) latent variables fixed, loadings intercepts estimated. Now define specifications fragment. list passing along syntax data . Note even though Fragment 2, conditional Fragment 1. expressed argument conditioning = 0.","code":"Mplus.MODEL.syntax.fragment.2 <- \"     ! Word Learning Factor Model    ! Phonological   PHON BY   ICPVL1gm* ICPVL2gm DIPVL1gm DIPVL2gm   SIPVL1gm SIPVL2gm LTPVL1gm LTPVL2gm ICNT2P ICNT1P   DINT1P DINT2P PINTGM   PIPVLgm;    ! Semantic   SEM BY ICVDD2ap* SIVDD1ap SIVDD2ap PIVDD0ap PIVFRgmp   ICVDD1ap SIVFR1gm SIVFR2gm LTVFR1gm LTVFR2gm;    ! Factor Variances   PHON@1;   SEM@1;    ! Factor Correlations   PHON WITH SEM;    ! Factor Means   [PHON@0];   [SEM@0];   \" fragment.2.specs <- list(   name = \"Word Learning Measurement Model\",   model.syntax = Mplus.MODEL.syntax.fragment.2,   conditioning = 0,   data = data.for.mplus )"},{"path":"https://roy-levy.github.io/muppet_pub/articles/example_2.html","id":"specify-fragment-3","dir":"Articles","previous_headings":"","what":"Specify Fragment 3","title":"SEM with Multiple Latent Variables, in 4 Fragments","text":"Fragment 3 conditional Fragment 2, adds including additional variables indicators one latent variables. Note syntax also includes specifications fixing latent variable means variances. included Fragment 1 well, also need preserve constraint. effect, function bring results fitted parameters Fragment 2. latent variable means variances fitted parameters Fragment 2. fixed Fragment 2. “brought forward” looking fitted results Fragment 2. need specified well. Now define specifications fragment. list passing along syntax data, fragments. setting conditioning = 2 list specifications, instructing functions condition results Fragment 2.","code":"Mplus.MODEL.syntax.fragment.3 <- \"   ! Word Learning Factor Model    ! Phonological   PHON BY PIMD0ap* ICMD2ap ICMD1ap DIMD1ap  DIMD2ap;    ! Factor Variances   PHON@1;   SEM@1;    ! Factor Means   [PHON@0];   [SEM@0];   \" fragment.3.specs <- list(   name = \"Including More Word Learning Indicators\",   model.syntax = Mplus.MODEL.syntax.fragment.3,   conditioning = 2,   data = data.for.mplus )"},{"path":"https://roy-levy.github.io/muppet_pub/articles/example_2.html","id":"specify-fragment-4","dir":"Articles","previous_headings":"","what":"Specify Fragment 4","title":"SEM with Multiple Latent Variables, in 4 Fragments","text":"Fragment 4 contains structural portion relating latent variables Fragment 1 Fragment 3 (also part Fragment 2). latent variables Fragment 1 exogenous fragment, remain . Accordingly, Mplus syntax factor means variances fixed, Fragment 1. contrast, latent variables Fragment 3 exogenous Fragment 3, now endogenous (predicted latent variables Fragment 1). Accordingly, Even though means variances fixed Fragment 3, parameters now functions parameters, estimate intercepts latent disturbance variances latent variables part structural model. Note also correlation latent disturbances part fitted model . reason. Now define specifications fragment. first key element conditioning = c(1,2,3). communicates Fragment 4 conditional Fragments 1, 2, 3. next key element parameters..exclude..conditioning. list 3 entries, corresponding 3 fragments conditioning . entries list express parameters antecedent fragment ignore (.e., carry forward Fragment 4). example, want carry forward fitted parameters Fragment 1, first element list none. want ignore fitted parameters Fragment 2 3. particular, want ignore fitted covariances among latent variables fragments, fragments now endogenous, wish estimate latent disturbance covariance, mentioned . .","code":"Mplus.MODEL.syntax.fragment.4 <- \"    ! Structural relations   PHON ON CE FOA PSR;   SEM ON CE FOA PSR;    ! Structural intercepts   [PHON];   [SEM];    ! Latent correlations (disturbances)   PHON WITH SEM;    ! Factor Variances   CE@1;   FOA@1;   PSR@1;    ! Factor Means   [CE@0];   [FOA@0];   [PSR@0];   \" fragment.4.specs <- list(   name = \"Working Memory Predict Word Learning\",   model.syntax = Mplus.MODEL.syntax.fragment.4,   conditioning = c(1,2,3),   parameters.to.exclude.in.conditioning = list(     # fragment 1     \"none\",      # fragment 2     c(\"(co)variances of latent variables\"),      # fragment 3     c(\"(co)variances of latent variables\")    ),   data = data.for.mplus )"},{"path":"https://roy-levy.github.io/muppet_pub/articles/example_2.html","id":"conduct-muppet-modeling","dir":"Articles","previous_headings":"","what":"Conduct MUPPET modeling","title":"SEM with Multiple Latent Variables, in 4 Fragments","text":"code demonstrates conducting MUPPET modeling. fragments argument contains specifications model fragments defined . rest arguments communicate specifications running MCMC saving output. Running code write output files.","code":"MUPPET.modular(   fragments = list(fragment.1.specs, fragment.2.specs, fragment.3.specs, fragment.4.specs),   n.chains = 2,   n.warmup = 0,   n.burnin = 500,   n.iters.per.chain.after.warmup.and.burnin = 100,   n.estimation.batches = 25,   convergence.assessment = \"none\",   save.summary.plots.from.MUPPET = \"none\" )"},{"path":"https://roy-levy.github.io/muppet_pub/articles/example_3.html","id":"overview","dir":"Articles","previous_headings":"","what":"Overview","title":"IRT Calibration, In-Sample Scoring, & Out-Of-Sample Scoring, in 3 Fragments","text":"example demonstrates use muppet() package perform MUPPET modeling item response theory (IRT) example. example 3 fragments. Fragment 1 (calibration), measurement model fit set item responses 10 items sample examinees (referred Sample ). Fitting fragment yields estimated measurement model (.e., item) parameters. Fragment 2, results Fragment 1 used estimate latent variable values examinees dataset, Sample (.e., conduct -sample scoring). Fragment 3, results Fragment 1 used estimate latent variable values different set examinees (Sample B) whose data part calibration process (.e., conduct --sample scoring).","code":""},{"path":"https://roy-levy.github.io/muppet_pub/articles/example_3.html","id":"data-prepration","dir":"Articles","previous_headings":"","what":"Data Prepration","title":"IRT Calibration, In-Sample Scoring, & Out-Of-Sample Scoring, in 3 Fragments","text":"Load package extract data example.","code":"library(muppet) data(sim.IRT, package = \"muppet\")"},{"path":"https://roy-levy.github.io/muppet_pub/articles/example_3.html","id":"specify-fragment-1","dir":"Articles","previous_headings":"","what":"Specify Fragment 1","title":"IRT Calibration, In-Sample Scoring, & Out-Of-Sample Scoring, in 3 Fragments","text":"Fragment 1 fits IRT model item responses 10 items. One key specification Fragment 1 Mplus syntax IRT measurement model. specification latent variable modeled fixed mean variance. loadings (discriminations) location parameters estimated. observed variables discrete (categorical), need specify Mplus VARIABLE command. , define R object desired text Mplus input file. Now define specifications fragment. list passing along syntax . setting conditioning = 0 list specifications, fitting fragment without conditioning fragment. data argument selects relevant item responses raw dataset, namely Sample responding items 1-10.","code":"Mplus.MODEL.syntax.fragment.1 <- \"   F1 by It1-It10*;   [It1$1-It10$1];   F1@1;   [F1@0]; \" Mplus.VARIABLE.syntax.fragment.1 <- \"      CATEGORICAL =         It1-It10     ;   \" library(dplyr)  fragment.1.specs <- list(   name = \"Sample A Items 1-10 Calibration\",   model.syntax = Mplus.MODEL.syntax.fragment.1,   variable.syntax = Mplus.VARIABLE.syntax.fragment.1,   conditioning = 0,   data =   bind_cols(     sim.IRT.data.sample.A %>%       dplyr::select(contains(\"ID\")),     sim.IRT.data.sample.A %>%       dplyr::select(num_range(\"It\", 1:10))   ) )"},{"path":"https://roy-levy.github.io/muppet_pub/articles/example_3.html","id":"specify-fragment-2","dir":"Articles","previous_headings":"","what":"Specify Fragment 2","title":"IRT Calibration, In-Sample Scoring, & Out-Of-Sample Scoring, in 3 Fragments","text":"Fragment 2 wish estimate latent variables examinees Fragment 1. model Fragment 1. model syntax just includes model specifications latent variable mean variance. included Fragment 1 well, also need preserve constraint. effect, function bring results fitted parameters Fragment 1. latent variable mean variance fitted parameters Fragment 1. fixed Fragment 1. “brought forward” looking fitted results Fragment 1. need specified well. Fragment 1, need communicate observed variables discrete (categorical). , can simply define R object desired text Mplus input file just Fragment 1. Now define specifications fragment. list passing along syntax . setting conditioning = 1 list specifications, fitting fragment conditional Fragment 1. declare fragment involves estimating latent variables setting estimating.lvs = TRUE. next argument, give text names latent variables estimated. name must correpond name Mplus syntax. case, name latent variable Mplus F1, indicate lvs..estimate = c(\"F1\"). data data Fragment 1. using dataset fragments; Fragment 2 estimating latent variables examinees used Fragment 1. , conducting -sample scoring conditional calibration Fragment 1.","code":"Mplus.MODEL.syntax.fragment.2 <- \"   F1@1;   [F1@0]; \" Mplus.VARIABLE.syntax.fragment.2 <- Mplus.VARIABLE.syntax.fragment.1 library(dplyr)  fragment.2.specs <- list(   name =\"Sample A Items 1-10 Scoring\",   model.syntax = Mplus.MODEL.syntax.fragment.2,   variable.syntax = Mplus.VARIABLE.syntax.fragment.2,   conditioning = 1,   estimating.lvs = TRUE,   lvs.to.estimate = c(\"F1\"),   data = bind_cols(     sim.IRT.data.sample.A %>%       dplyr::select(contains(\"ID\")),     sim.IRT.data.sample.A %>%       dplyr::select(num_range(\"It\", 1:10))   ) )"},{"path":"https://roy-levy.github.io/muppet_pub/articles/example_3.html","id":"specify-fragment-3","dir":"Articles","previous_headings":"","what":"Specify Fragment 3","title":"IRT Calibration, In-Sample Scoring, & Out-Of-Sample Scoring, in 3 Fragments","text":"Fragment 3 like Fragment 2 wish estimate latent variables examinees. difference examinees used Fragment 1 (.e., Fragment 3 pursues --sample scoring. model Fragments 1 2. Like syntax Fragmen 2, model syntax just includes model specifications latent variable mean variance. included Fragment 1 well, discussed also need preserve constraint. need communicate observed variables discrete (categorical). , can simply define R object desired text Mplus input file just Fragment 2. Now define specifications fragment. specifications mimic Fragment 2. key difference data. using item responses different sample (Sample B) used previous fragment. Note also setting conditioning = 1 list specifications, fitting fragment conditional Fragment 1, conditional Fragment 2.","code":"Mplus.MODEL.syntax.fragment.3 <- \"   F1@1;   [F1@0]; \" Mplus.VARIABLE.syntax.fragment.3 <- Mplus.VARIABLE.syntax.fragment.2 library(dplyr)  fragment.3.specs <- list(   name =\"Sample B Items 1-10 Scoring\",   model.syntax = Mplus.MODEL.syntax.fragment.3,   variable.syntax = Mplus.VARIABLE.syntax.fragment.3,   conditioning = 1,   estimating.lvs = TRUE,   lvs.to.estimate = c(\"F1\"),   data = bind_cols(     sim.IRT.data.sample.B %>%       dplyr::select(contains(\"ID\")),     sim.IRT.data.sample.B %>%       dplyr::select(num_range(\"It\", 1:10))   ) )"},{"path":"https://roy-levy.github.io/muppet_pub/articles/example_3.html","id":"conduct-muppet-modeling","dir":"Articles","previous_headings":"","what":"Conduct MUPPET modeling","title":"IRT Calibration, In-Sample Scoring, & Out-Of-Sample Scoring, in 3 Fragments","text":"code demonstrates conducting MUPPET modeling. fragments argument contains specifications model fragments defined . rest arguments communicate specifications running MCMC saving output. Running code write output files.","code":"MUPPET.modular(     fragments = list(fragment.1.specs, fragment.2.specs, fragment.3.specs),     n.chains = 2,     n.warmup = 0,     n.burnin = 500,     n.iters.per.chain.after.warmup.and.burnin = 100,     n.estimation.batches = 25,     convergence.assessment = \"none\",     save.summary.plots.from.MUPPET = \"none\", )"},{"path":"https://roy-levy.github.io/muppet_pub/articles/example_4.html","id":"overview","dir":"Articles","previous_headings":"","what":"Overview","title":"IRT Calibration of Additional Items, in 3 Fragments","text":"example demonstrates use muppet() package perform MUPPET modeling item response theory (IRT) example. example 3 fragments, representing situation additional calibrations (.e., estimating measurement model parameters) new items added time, using data different samples, certain items serve anchor items across adjacent administrations. Fragment 1, measurement model fit set item responses items 1-10 sample examinees (referred Sample ). Fitting fragment yields estimated measurement model (.e., item) parameters. Fragment 2, use data another sample (Sample C) responding items 6-15. results items Fragment 1 carried forward Fragment 2, new items (.e., items 11-15) calibrated existing scale. Fragment 3, use data another sample (Sample D) responding items 11-20. results items previous fragments 1 carried forward Fragment 3, new items (.e., items 16-20) calibrated existing scale. addition, example demonstrates use software certain fragments fit one call function, fragments serve antecedents another fragment fit separate call function. supposed mimic situation wish estimation “go,” wish read results antecedent fragments rather re-fit fragments.","code":""},{"path":"https://roy-levy.github.io/muppet_pub/articles/example_4.html","id":"data-prepration","dir":"Articles","previous_headings":"","what":"Data Prepration","title":"IRT Calibration of Additional Items, in 3 Fragments","text":"Load package extract data example.","code":"library(muppet) data(sim.IRT, package = \"muppet\")"},{"path":"https://roy-levy.github.io/muppet_pub/articles/example_4.html","id":"specify-fragment-1","dir":"Articles","previous_headings":"","what":"Specify Fragment 1","title":"IRT Calibration of Additional Items, in 3 Fragments","text":"Fragment 1 fits IRT model item responses 10 items Sample . One key specification Fragment 1 Mplus syntax IRT measurement model. specification latent variable modeled fixed mean variance. loadings (discriminations) location parameters estimated. observed variables discrete (categorical), need specify Mplus VARIABLE command. , define R object desired text Mplus input file. Now define data fragment, item responses Sample items 1-10. Now define specifications fragment. list passing along syntax . setting conditioning = 0 list specifications, fitting fragment without conditioning fragment.","code":"Mplus.MODEL.syntax.fragment.1 <- \"   F1 by It1-It10*;   [It1$1-It10$1];   F1@1;   [F1@0]; \" Mplus.VARIABLE.syntax.fragment.1 <- \"      CATEGORICAL =         It1-It10     ;   \" library(dplyr) data.fragment.1 =   bind_cols(     sim.IRT.data.sample.A %>%       dplyr::select(contains(\"ID\")),     sim.IRT.data.sample.A %>%       dplyr::select(num_range(\"It\", 1:10))   ) fragment.1.specs <- list(   name = \"Sample A Items 1-10 Calibration\",   model.syntax = Mplus.MODEL.syntax.fragment.1,   variable.syntax = Mplus.VARIABLE.syntax.fragment.1,   conditioning = 0,   data = data.fragment.1 )"},{"path":"https://roy-levy.github.io/muppet_pub/articles/example_4.html","id":"specify-fragment-2","dir":"Articles","previous_headings":"","what":"Specify Fragment 2","title":"IRT Calibration of Additional Items, in 3 Fragments","text":"Fragment 2 wish calibrate new items (items 11-15), using responses new sample (Sample C), treating items 6-10 anchor items. model syntax includes model specifications latent variable mean variance. included Fragment 1 well, also need preserve constraint. effect, function bring results fitted parameters Fragment 1. latent variable mean variance fitted parameters Fragment 1. fixed Fragment 1. “brought forward” looking fitted results Fragment 1. need specified well. case Fragment 1, need specify observed variables discrete (categorical). , define R object desired text Mplus input file. Note code items 1-15, just items 6-15 item responses Sample C used fragment. carrying forward results Fragment 1, include parameters data items 1-5. Now define data fragment, including data used Fragment 1 (item responses Sample items 1-10) new data fragment (item responses Sample C items 6-15). Now define specifications fragment. list passing along syntax . setting conditioning = 1 list specifications, fitting fragment conditioning Fragment 1.","code":"Mplus.MODEL.syntax.fragment.2 <- \"   F1 by It11-It15*;   [It11$1-It15$1];   F1@1;   [F1@0]; \" Mplus.VARIABLE.syntax.fragment.2 <- \"      CATEGORICAL =         It1-It15     ;   \" library(dplyr) temp.data.2 =   bind_cols(     sim.IRT.data.sample.C %>%       dplyr::select(contains(\"ID\")),     sim.IRT.data.sample.C %>%       dplyr::select(num_range(\"It\", 6:15))   )  data.fragment.2 <- full_join(data.fragment.1, temp.data.2) rm(temp.data.2) fragment.2.specs <- list(   name = \"Sample C Items 11-15 Calibration\",   model.syntax = Mplus.MODEL.syntax.fragment.2,   variable.syntax = Mplus.VARIABLE.syntax.fragment.2,   conditioning = 1,   data = data.fragment.2 )"},{"path":"https://roy-levy.github.io/muppet_pub/articles/example_4.html","id":"specify-fragment-3","dir":"Articles","previous_headings":"","what":"Specify Fragment 3","title":"IRT Calibration of Additional Items, in 3 Fragments","text":"Fragment 3 wish calibrate new items (items 16-20), using responses new sample (Sample D), treating previous items anchor items. model syntax similar Fragment 2. case Fragment 1, need specify observed variables discrete (categorical). , define R object desired text Mplus input file. Note code items 1-20, just items 11-20 item responses Sample D used fragment. carrying forward results previous fragments, include parameters data items. Now define data fragment, including data used previous fragments (namely, Fragment 2) new data fragment (item responses Sample D items 11-20). Now define specifications fragment. list passing along syntax . setting conditioning = c(1,2) list specifications, fitting fragment conditioning Fragments 1 2.","code":"Mplus.MODEL.syntax.fragment.3 <- \"   F1 by It16-It20*;   [It16$1-It20$1];   F1@1;   [F1@0]; \" Mplus.VARIABLE.syntax.fragment.3 <- \"      CATEGORICAL =         It1-It20     ;   \" library(dplyr) temp.data.3 =   bind_cols(     sim.IRT.data.sample.D %>%       dplyr::select(contains(\"ID\")),     sim.IRT.data.sample.D %>%       dplyr::select(num_range(\"It\", 11:20))   )  data.fragment.3 <- full_join(data.fragment.2, temp.data.3) rm(temp.data.3) fragment.3.specs <- list(   name = \"Sample D Items 16-20 Calibration\",   model.syntax = Mplus.MODEL.syntax.fragment.3,   variable.syntax = Mplus.VARIABLE.syntax.fragment.3,   conditioning = c(1,2),   data = data.fragment.3 )"},{"path":"https://roy-levy.github.io/muppet_pub/articles/example_4.html","id":"conduct-muppet-modeling-for-fragments-1-and-2","dir":"Articles","previous_headings":"","what":"Conduct MUPPET modeling for Fragments 1 and 2","title":"IRT Calibration of Additional Items, in 3 Fragments","text":"code demonstrates conducting MUPPET modeling, Fragments 1 2. fragments argument contains specifications model fragments defined . rest arguments communicate specifications running MCMC saving output. Running code write output files.","code":"MUPPET.modular(     fragments = list(fragment.1.specs, fragment.2.specs),     n.chains = 2,     n.warmup = 0,     n.burnin = 500,     n.iters.per.chain.after.warmup.and.burnin = 100,     n.estimation.batches = 25,     convergence.assessment = \"none\",     save.summary.plots.from.MUPPET = \"none\""},{"path":"https://roy-levy.github.io/muppet_pub/articles/example_4.html","id":"conduct-muppet-modeling-for-fragment-3","dir":"Articles","previous_headings":"","what":"Conduct MUPPET modeling for Fragment 3","title":"IRT Calibration of Additional Items, in 3 Fragments","text":"code demonstrates conducting MUPPET modeling fitting Fragment 3, reading results Fragments 1 2. indicate Fragments 1 2 fit, change specifications indicate fit. running MUPPET analysis , results Fragments 1 2 read fit Fragment 2.","code":"fragment.1.specs$to.fit = FALSE fragment.2.specs$to.fit = FALSE MUPPET.modular(     fragments = list(fragment.1.specs, fragment.2.specs,fragment.3.specs),     n.chains = 2,     n.warmup = 0,     n.burnin = 500,     n.iters.per.chain.after.warmup.and.burnin = 100,     n.estimation.batches = 25,     convergence.assessment = \"none\",     save.summary.plots.from.MUPPET = \"none\" )"},{"path":[]},{"path":"https://roy-levy.github.io/muppet_pub/articles/tips.html","id":"variable-names","dir":"Articles","previous_headings":"Tips for MUPPET Modeling and Software","what":"Variable names","title":"Tips for Using the Software to conduct MUPPET Modeling","text":"Owing Mplus’s naming conventions parameters, variable names 8 characters fewer. variables discrete (categorical), length names 6 characters fewer. (holds long fewer 10 thresholds categorical variables. ’re using variable 10 thresholds, likely need even shorter variable name.)","code":""},{"path":"https://roy-levy.github.io/muppet_pub/articles/tips.html","id":"number-of-iterations","dir":"Articles","previous_headings":"Tips for MUPPET Modeling and Software","what":"Number of iterations","title":"Tips for Using the Software to conduct MUPPET Modeling","text":"Theoretically, number chains iterations used. However, early testing indicated problems can occur using single chain, using fewer 100 iterations inference. concretely, means n.chains least 2, n.iters.per.chain..warmup..burnin least 100.","code":""},{"path":"https://roy-levy.github.io/muppet_pub/articles/tips.html","id":"crashing-or-exhausting-of-memory","dir":"Articles","previous_headings":"Tips for MUPPET Modeling and Software","what":"Crashing or exhausting of memory","title":"Tips for Using the Software to conduct MUPPET Modeling","text":"experience crashes issues related exhausting computer memory, can help increase value n.estimation.batches.","code":""},{"path":"https://roy-levy.github.io/muppet_pub/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Roy Levy. Author, maintainer. Karina Cahill. Contributor. Juanjo Mesa. Contributor.","code":""},{"path":"https://roy-levy.github.io/muppet_pub/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Levy R (2025). muppet: Measurement Uncertainty Preserving ParamETric (MUPPET) Modeling. R package version 0.1.4, https://roy-levy.github.io/muppet_pub/.","code":"@Manual{,   title = {muppet: Measurement and Uncertainty Preserving ParamETric (MUPPET) Modeling},   author = {Roy Levy},   year = {2025},   note = {R package version 0.1.4},   url = {https://roy-levy.github.io/muppet_pub/}, }"},{"path":"https://roy-levy.github.io/muppet_pub/index.html","id":"overview","dir":"","previous_headings":"","what":"Overview","title":"Measurement and Uncertainty Preserving ParamETric (MUPPET) Modeling","text":"muppet package executes Measurement Uncertainty Preserving ParamETric (MUPPET) modeling. MUPPET modular approach model fitting, using Bayesian approaches modeling estimation. Models analyses conceived terms fragments. may fit data analyzed, possibly conditional antecedent fragments. case, results antecedent fragments carried forward depend .","code":""},{"path":"https://roy-levy.github.io/muppet_pub/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"Measurement and Uncertainty Preserving ParamETric (MUPPET) Modeling","text":"can install current public version muppet GitHub :","code":"# install.packages(\"remotes\")  # if you don't have remotes installed remotes::install_github(\"Roy-Levy/muppet_pub\")"},{"path":"https://roy-levy.github.io/muppet_pub/index.html","id":"examples","dir":"","previous_headings":"","what":"Examples","title":"Measurement and Uncertainty Preserving ParamETric (MUPPET) Modeling","text":"Examples Tips page examples explanations basic functionality.","code":""},{"path":"https://roy-levy.github.io/muppet_pub/index.html","id":"contact","dir":"","previous_headings":"","what":"Contact","title":"Measurement and Uncertainty Preserving ParamETric (MUPPET) Modeling","text":"questions suggestions features? Found bug? Please contact Roy.Levy@asu.edu","code":""},{"path":"https://roy-levy.github.io/muppet_pub/reference/df_to_mcmc_list.html","id":null,"dir":"Reference","previous_headings":"","what":"Converts a dataframe to an mcmc.list object — df_to_mcmc_list","title":"Converts a dataframe to an mcmc.list object — df_to_mcmc_list","text":"internal function, intended called users directly.","code":""},{"path":"https://roy-levy.github.io/muppet_pub/reference/df_to_mcmc_list.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Converts a dataframe to an mcmc.list object — df_to_mcmc_list","text":"","code":"df_to_mcmc_list(df, chain_col = \"Chain.number\", iter_col = \"Iteration.number\")"},{"path":"https://roy-levy.github.io/muppet_pub/reference/df_to_mcmc_list.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Converts a dataframe to an mcmc.list object — df_to_mcmc_list","text":"df dataframe converted mcmc.list object chain_col alter iter_col alter","code":""},{"path":"https://roy-levy.github.io/muppet_pub/reference/df_to_mcmc_list.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Converts a dataframe to an mcmc.list object — df_to_mcmc_list","text":"mcmc.list object","code":""},{"path":"https://roy-levy.github.io/muppet_pub/reference/mcmcplot.mod.html","id":null,"dir":"Reference","previous_headings":"","what":"Plot MCMC draws — mcmcplot.mod","title":"Plot MCMC draws — mcmcplot.mod","text":"modified version mcmcplot() function mcmcplots. Modified automatically open html file created. version creates saves various plots HTML file collecting (automatically open HTML file.) function intended called users directly.","code":""},{"path":"https://roy-levy.github.io/muppet_pub/reference/mcmcplot.mod.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plot MCMC draws — mcmcplot.mod","text":"","code":"mcmcplot.mod(...)"},{"path":"https://roy-levy.github.io/muppet_pub/reference/mcmcplot.mod.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plot MCMC draws — mcmcplot.mod","text":"See mcmcplot() mcmcplots() package.","code":""},{"path":"https://roy-levy.github.io/muppet_pub/reference/mcmcplot.mod.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Plot MCMC draws — mcmcplot.mod","text":"See mcmcplot() mcmcplots() package.","code":""},{"path":[]},{"path":"https://roy-levy.github.io/muppet_pub/reference/MUPPET.modular.html","id":null,"dir":"Reference","previous_headings":"","what":"MUPPET Analysis — MUPPET.modular","title":"MUPPET Analysis — MUPPET.modular","text":"Conduct modular MUPPET modeling.","code":""},{"path":"https://roy-levy.github.io/muppet_pub/reference/MUPPET.modular.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"MUPPET Analysis — MUPPET.modular","text":"","code":"MUPPET.modular(   fragments = NULL,   n.chains = 2,   n.warmup = 0,   n.burnin = 500,   n.iters.per.chain.after.warmup.and.burnin = 2500,   n.thin = 1,   n.estimation.batches = NULL,   convergence.assessment = \"unstandardized\",   save.summary.stats.from.MUPPET = TRUE,   save.summary.stats.from.MUPPET.in.Word = FALSE,   digits.to.round.for.Word = 2,   save.summary.plots.from.MUPPET = \"unstandardized\",   save.draws.from.MUPPET = TRUE,   model.check = FALSE,   save.post.pred.data = FALSE,   retain.iteration.files = FALSE,   return.R.object = FALSE )"},{"path":"https://roy-levy.github.io/muppet_pub/reference/MUPPET.modular.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"MUPPET Analysis — MUPPET.modular","text":"fragments list elements defining model fragments.   element list contains set specifications corresponding   fragment. 1st element list pertains 1st fragment,   2nd element list pertains 2nd fragment, . order   list also communicates order model fragment fit. element list list specifications fragment. set specifications can include: name: Character, giving name fragment. default. nothing supplied, fragment name fragment number. fragment.folder: Character, giving name folder created storing results fragment. value supplied, default name made fragment number fragment name. model.syntax: Character, containing syntax Mplus MODEL statement. variable.syntax: Character, containing syntax Mplus VARIABLE statement. priors.syntax: Character, expression containing Mplus syntax prior specifications model fragment, corresponding Mplus MODELPRIORS statement. nothing specified, defaults using Mplus's default priors. conditioning: Number, vector numbers, indicating fragments  condition fitting fragment. Examples: value 0 indicates  fragment unconditional; value 1 indicates fragment  conditional first fragment fragments list; value c(1, 2)  indicates fragment conditional fragment 1 fragment 2  fragments list. parameters..exclude..conditioning: list, length equal number fragments conditioned (.e., length collection supplied argument pkgconditioning).  element list character, character vector, naming kinds parameters associated antecedent fragment ignored fitting fragment.  Possible values : \"none\" \"loadings\" \"(co)variances observables\" \"means intercepts observables\" \"thresholds\" \"structural coefficients\" \"(co)variances latent variables\" \"means intercepts latent variables\" .fit: Logical, indicating fragment fit. value supplied, defaults TRUE. value FALSE, fragment fit. can useful fragment previously fit, now used antecdent another fragment. estimating.lvs: Logical, indicating fragment pertains estimating latent variable values. Default FALSE. using default may finicky, recommend specifying explicitly. data: dataset use fitting fragment. n.chains number Markov chains run unconditional fragment. Default 2. n.warmup number warmup iterations used Markov chains. applicable stan related software. needed, need specified, using Mplus. Default 0.. n.burnin number iterations discard burn-iterations Markov chains. See also argument n.thin. Default 500. n.iters.per.chain..warmup..burnin number iterations desired, chain, warmup burn-period. See also argument n.thin. Default 2500. n.thin thinning parameter, Markov chain. Importantly, using Mplus, applies iterations. example, suppose n.burnin = 500,  n.iters.per.chain..warmup..burnin = 2500, n.thin = 2. effectively instructs Mplus run 1000 iterations burn-(.e., 1000 iterations thinned 2 500) 5000 iterations burn-(.e., 5000 iterations thinned 2 2500). Default 1. n.estimation.batches number estimation batches fitting fragments conditional antecedent fragments. Default NULL, case function divide total number post burn-iterations 1000, effectively batches 1000 iterations time. Using estimation batches leads fewer iterations per estimation batch. can helpful reducing computational burden run time, also offers future possibilities checkpointing. convergence.assessment Character, indicating convergence assessment desired fragments conditional antecedents. Options : \"unstandardized\" plot unstandardized parameters, \"\" plot standardized unstandardized parameters, \"none\" turning convergence assessment. argument irrelevant fragments conditional antecedent fragments. Default \"unstandardized\". save.summary.stats..MUPPET Logical, indicating numerical summaries posterior distributions saved. Default TRUE. save.summary.stats..MUPPET..Word Logical, indicating slimmed numerical summary statistics posterior distributions saved Word documents. Default FALSE. digits..round..Word Numerical. Digits round saving results Word documents. relevant save.summary.stats..MUPPET..Word = TRUE. Default = 2. save.summary.plots..MUPPET Character, indicating summary plots posterior saved. Options : \"unstandardized\" plot unstandardized parameters, \"\" plot standardized unstandardized parameters, \"none\" turning plots. Default \"unstandardized\". save.draws..MUPPET Logical, indicating whether draws fitting MUPPET model written output file. Default TRUE. model.check Logical, indicating model-data fit conducted. Default FALSE. feature supported earlier versions limited classes models. currently, planned future development. save.post.pred.data Logical, indicating posterior predicted datasets model-data fit procedure saved Default FALSE. feature supported earlier versions limited classes models. currently, planned future development. retain.iteration.files Logical. conditional fragments, iteration-specific files saved? Saving files may take lot space. set FALSE, still save files iteration 1, may useful troubleshooting needed. Default FALSE. return.R.object Logical, indicating whether return results R object. Default FALSE. supported earlier versions limited class models. current, set TRUE. future development.","code":""},{"path":"https://roy-levy.github.io/muppet_pub/reference/MUPPET.modular.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"MUPPET Analysis — MUPPET.modular","text":"statement long took run. requested output files written hard drive. Future development include returning objects R.","code":""},{"path":[]}]
